{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Block","props","width","height","x","y","react_default","a","createElement","className","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleKeyDown","event","key","state","gameOver","reset","checkBoard","yPos","cellScale","Math","floor","board","length","newTimer","createNewBlocks","winner","blink","displayMessage","distance","update","bind","assertThisInitialized","messageBlink","_this2","intervalId","setInterval","setState","inactiveBlocks","Array","blocksToSpawn","document","addEventListener","evt","clearInterval","slice","i","activeBlocks","splice","concat","timeout","_this3","midPoint","push","createBlock","blocks","updateActiveBlocks","renderBlocks","ReactDOM","render","getElementById","id","onClick","React","Component","Boolean","window","location","hostname","match","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2e80a71b.chunk.js","sourcesContent":["import ReactDOM from 'react-dom'\nimport React from 'react';\nimport './App.css';\n\nfunction Block(props) {\n    const {width, height, x, y} = props;\n\n    return (<rect width={width} height={height} x={x} y={y} className=\"rect\"/>);\n}\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            board: [\n                [0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0],\n            ],\n            gameOver: false,\n            winner: false,\n            blink: true,\n            displayMessage: 'STACKER',\n        };\n\n        this.cellScale = 50;\n        this.distance = this.cellScale;\n\n        this.update = this.update.bind(this);\n        this.messageBlink = this.messageBlink.bind(this);\n    }\n\n    /**\n     * Initializes values when component mounts\n     */\n    componentDidMount() {\n        this.height = this.cellScale * this.state.board.length;\n        this.width = this.cellScale * this.state.board[0].length;\n\n        this.intervalId = setInterval(this.update, 150);\n        this.setState({\n            yPos: this.height - this.cellScale,\n            inactiveBlocks: Array(0),\n            blocksToSpawn: 3,\n        }, () => this.createNewBlocks());\n\n        document.addEventListener(\"keydown\", (evt => this.handleKeyDown(evt)));\n    }\n\n    /**\n     * When component unmounts\n     */\n    componentWillUnmount() {\n        clearInterval(this.intervalId);\n    }\n\n    /**\n     * Handles key presses\n     *\n     * @param event used to access which key has been pressed\n     */\n    handleKeyDown = event => {\n        // IF SPACE key is pressed and game is not over\n        if (event.key === ' ' && !this.state.gameOver) {\n            this.checkBoard();\n\n            // IF the game is not over (game state may have changed in checkBoard)\n            if (!this.state.gameOver) {\n                // IF y position has reached 2/3 of the board\n                if (this.state.yPos / this.cellScale === Math.floor(((this.state.board.length - 1)) / 3)) {\n                    this.newTimer(2, 85);   // INCREASE speed\n                }\n                // IF y position has reached 1/3 of the board\n                else if (this.state.yPos / this.cellScale === Math.floor((2 * (this.state.board.length - 1)) / 3)) {\n                    this.newTimer(3, 100);  // INCREASE speed\n                }\n\n                this.createNewBlocks();\n            }\n        }\n        else {\n            // IF R key is pressed and game is not over\n            if (event.key === 'r') {\n                this.reset();\n            }\n        }\n    };\n\n    /**\n     * Checks below active blocks\n     *  IF there are no blocks below active blocks:\n     *      DECREMENT blocks to spawn\n     *      IF blocks to spawn equals 0\n     *          GAME IS OVER\n     *  ELSE:\n     *      UPDATE BOARD\n     */\n    checkBoard() {\n        let board = this.state.board.slice();\n\n        // FOREACH active block\n        for (let i = 0; i < this.state.activeBlocks.length; i++) {\n            const x = this.state.activeBlocks[i].props.x;\n            const y = this.state.activeBlocks[i].props.y;\n\n            // IF current y position is at the bottom of the board\n            if (this.state.yPos === this.height - this.cellScale) {\n                board[y / this.cellScale][x / this.cellScale] = 1;\n            } else {\n                // IF active block is under a block\n                if (board[(y / this.cellScale) + 1][x / this.cellScale] === 1) {\n                    board[y / this.cellScale][x / this.cellScale] = 1;\n                } else {\n                    this.state.activeBlocks.splice(i, 1);   // REMOVE block from active blocks\n                    this.setState({\n                        blocksToSpawn: this.state.blocksToSpawn - 1,  // DECREMENT blocks to spawn\n                    }, function () {\n                        this.setState({\n                            gameOver: this.state.blocksToSpawn === 0  // IF blocks to spawn is 0, the game is over\n                                                                      // player lost\n                        });\n                    });\n\n                    i--;\n                }\n            }\n        }\n\n        this.setState({\n            yPos: this.state.yPos - this.cellScale, // SET new y position\n            board: board,\n            inactiveBlocks:\n                this.state.inactiveBlocks.concat(this.state.activeBlocks)   // INSERT active blocks to inactive blocks\n        }, function () {\n            // IF y position is less than 0 and game is not over\n            if (this.state.yPos < 0 && !this.state.gameOver) {\n                this.setState({\n                    gameOver: true, // game is over\n                    winner: true    // player won\n                });\n            }\n        });\n\n        this.distance = this.cellScale;\n    }\n\n    /**\n     * SETS new update interval\n     *\n     * @param blocksToSpawn value that will be compared to the current value of blocks to spawn\n     * @param timeout new timeout value\n     */\n    newTimer(blocksToSpawn, timeout) {\n        // IF current blocks to spawn is equal to blocks to spawn\n        if (this.state.blocksToSpawn === blocksToSpawn) {\n            this.setState({\n                blocksToSpawn: this.state.blocksToSpawn - 1 // DECREMENT blocks to spawn\n            });\n        }\n\n        // SET new interval\n        clearInterval(this.intervalId);\n\n        this.intervalId = setInterval(this.update, timeout);\n    }\n\n    /**\n     * RESET game to initial state\n     */\n    reset() {\n        // SET new interval\n        clearInterval(this.intervalId);\n\n        this.intervalId = setInterval(this.update, 150);\n\n        // RESET state to initial state\n        this.setState({\n            board: [\n                [0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0, 0, 0],\n            ],\n            gameOver: false,\n            winner: false,\n            blink: true,\n            displayMessage: 'STACKER',\n            yPos: this.height - this.cellScale,\n            inactiveBlocks: Array(0),\n            blocksToSpawn: 3,\n        }, () => this.createNewBlocks());\n    }\n\n    /**\n     * Create new block\n     *\n     * @param x x position of block\n     * @param y y position ob block\n     * @returns {*} new block element\n     */\n    createBlock(x, y) {\n        return (\n            <Block\n                width={this.cellScale}\n                height={this.cellScale}\n                x={x}\n                y={y}\n            />\n        );\n    }\n\n    /**\n     * Creates a new set of block elements\n     */\n    createNewBlocks() {\n        const midPoint = Math.floor((this.width / 2) / this.cellScale) * this.cellScale;\n        let activeBlocks = Array(0);\n\n        // depending on the amount of blocks to spawn, push n blocks to active blocks\n        // eslint-disable-next-line\n        switch (this.state.blocksToSpawn) {\n            case 3:\n                activeBlocks.push(this.createBlock(midPoint - this.cellScale, this.state.yPos));\n            // eslint-disable-next-line\n            case 2:\n                activeBlocks.push(this.createBlock(midPoint, this.state.yPos));\n            // eslint-disable-next-line\n            case 1:\n                activeBlocks.push(this.createBlock(midPoint + this.cellScale, this.state.yPos));\n                break;\n        }\n\n        this.setState({\n            activeBlocks: activeBlocks\n        });\n    }\n\n    /**\n     * Updates active blocks\n     */\n    update() {\n        // IF the game is over and display message is still 'STACKER'\n        if (this.state.gameOver && this.state.displayMessage === 'STACKER') {\n            // SET new interval\n            clearInterval(this.intervalId);\n            this.intervalId = setInterval(this.messageBlink, 250);\n\n            this.setState({\n                blocks: this.state.activeBlocks.concat(this.state.inactiveBlocks)\n            });\n        } else {\n            this.updateActiveBlocks();\n\n            this.setState({\n                blocks: this.state.activeBlocks.concat(this.state.inactiveBlocks)\n            });\n        }\n\n        this.renderBlocks();\n    }\n\n    /**\n     * Blinking effect for display message once game is over\n     */\n    messageBlink() {\n        if (this.state.blink) {\n            this.setState({\n                blink: false,\n                displayMessage: this.state.winner ? 'WINNER' : 'LOSER'\n            });\n        } else {\n            this.setState({\n                blink: true,\n                displayMessage: <span>&nbsp;&nbsp;</span>\n            });\n        }\n    }\n\n    /**\n     * Move active blocks\n     */\n    updateActiveBlocks() {\n        const activeBlocks = this.state.activeBlocks.slice();\n\n        // IF rightmost block is at the rightmost cell\n        if (activeBlocks[activeBlocks.length - 1].props.x === this.width - this.cellScale) {\n            this.distance = -this.cellScale;\n        }\n        // IF leftmost block is at the leftmost cell\n        else if (activeBlocks[0].props.x === 0) {\n            this.distance = this.cellScale;\n        }\n\n        // move active blocks\n        for (let i = 0; i < activeBlocks.length; i++) {\n            let y = activeBlocks[i].props.y;\n            let x = activeBlocks[i].props.x + this.distance;\n\n            activeBlocks[i] = this.createBlock(x, y);\n        }\n\n        this.setState({\n            activeBlocks: activeBlocks\n        });\n    }\n\n    /**\n     * Renders all block elements\n     */\n    renderBlocks() {\n        ReactDOM.render(this.state.blocks, document.getElementById('canvas'));\n    }\n\n    render() {\n        return (\n            <div className=\"root\">\n                <h1>{this.state.displayMessage}</h1>\n                <svg\n                    width={this.width}\n                    height={this.height}\n                    id='canvas'\n                    className=\"canvas\"\n                    onClick={this.handleKeyDown}\n                >\n                </svg>\n                <h2>{this.state.gameOver ? \"PRESS 'R' TO PLAY AGAIN\" : \"PRESS 'SPACE' TO SET BLOCKS\" }</h2>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" messageBlink.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}